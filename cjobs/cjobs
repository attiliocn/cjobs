#!/usr/bin/env python3

import configparser
import subprocess
import argparse
import sys
import os
import datetime
import pathlib

CJOBS_DIR = sys.path[0]
sys.path.append(CJOBS_DIR)
from tools.container_tools import request_containers_using_rclone, parse_containers_list

parser = argparse.ArgumentParser()

subparsers = parser.add_subparsers(required=True, dest='subparser')

parser_cluster = subparsers.add_parser('cluster-setup', add_help=False)
parser_cluster.add_argument("--container", required=True, help='.sif container ID. To list available containers use cjobs --list-containers')
parser_cluster.add_argument("--send-files", nargs='+', required=False, help='send files from local to remote directory')
parser_cluster.add_argument("-c", "--cores", type=int, required=True, help='number of cores (CPUs) to be allocated')
parser_cluster.add_argument("-m", "--memory-per-core", type=int, required=True, help='memory in MB per core required')
parser_cluster.add_argument("-t", "--time", type=float, required=True, help='allocation time in hours')

parser_containers = subparsers.add_parser('listcontainers', help='list all available containers')

parser_gaussian = subparsers.add_parser('gaussian', help='setup a Gaussian calculation', parents=[parser_cluster])
parser_gaussian.add_argument('-j','--job', nargs='+', required=True, help='gaussian input file')

parser_xtb = subparsers.add_parser('xtb', help="setup a xTB calculation", parents=[parser_cluster])
parser_xtb.add_argument('-j','--job', nargs='+', required=True, help='coordinates file')
parser_xtb.add_argument('-f','--flags', nargs='+', default='', help='xTB flags')

parser_crest = subparsers.add_parser('crest', help="setup crest calculation", parents=[parser_cluster])
parser_crest.add_argument('-j','--job', nargs='+', required=True, help='coordinates file')
parser_crest.add_argument('-f','--flags', nargs='+', default='', help='crest flags')

args = parser.parse_args()

if args.subparser == 'listcontainers':
    stdout, stderr = request_containers_using_rclone("sintcatmol:containers")

    if stderr:
        print(stderr)
        print("Could not fetch containers list from Google Drive.\nCheck your configuration file and try again")
    else:
        containers = [i for i in stdout.split('\n')]
        containers.sort()
        print("{: <15}{: <25}{: <}".format('Container ID', "Build Time", "File"))
        for container in containers:
            container_data = container.replace('.sif','')
            container_data = container_data.split('_')
            print("{: <15}{: <25}{: <}".format(container_data[-1], container_data[-2], container))
    exit()

# read config file
config = configparser.ConfigParser()
config_file = os.path.join(os.environ['HOME'], '.cjobsrc')
try:
    with open(config_file) as f:
        config.read_file(f)
except FileNotFoundError:
    print('Error: Configuration file not found.')
    print('Missing ~/.cjobsrc file')
    exit()

QUEUE_SYSTEM = config['SCHEDULER']['engine']
SCRATCH_DIR = config['SCHEDULER']['scratch dir']
CONTAINERS_CLOUD_DIR = config['CONTAINERS']['cloud dir']
CONTAINERS_LOCAL_DIR = config['CONTAINERS']['local dir']

# check if container is valid
stdout, stderr = request_containers_using_rclone(CONTAINERS_CLOUD_DIR)
containers_list = [i for i in stdout.split('\n')]
containers_data = parse_containers_list(containers_list)
if args.container not in containers_data.keys():
    print(f'Invalid container. Container {args.container} not found!')
    print('Use cjobs --listcontainers for a list of valid containers')
    exit()

# convert jobtime from hours to input format HH:MM:SS
duration = datetime.timedelta(hours=args.time)
totsec = duration.total_seconds()
h = totsec//3600
m = (totsec%3600) // 60
sec =(totsec%3600)%60 #just for reference
walltime = f"{int(h):02d}:{int(m):02d}:{int(sec):02d}"

# Set variables according to n_jobs and scheduler type
# job_tag => single-job name or array name (unique)
# job
#
n_jobs = len(args.job)
if n_jobs == 1:
    job_name_in_script = 'job_name'
    job_input_in_script = 'job_input'
    job_local_dir_in_script = 'job_local_dir'
    job_scratch_dir_in_script = 'job_scratch_dir'

    job_input = args.job[0]
    job_tag = pathlib.Path(args.job[0]).stem
    job_name = job_tag
    
    job_local_dir =f'{os.getcwd()}'
    job_scratch_dir = f'"{SCRATCH_DIR}/"${job_name_in_script}""'
else:
    # function that writes a input file
    job_input_in_script = f'job_input'
    job_name_in_script = 'job_name'
    job_local_dir_in_script = 'job_local_dir'
    job_scratch_dir_in_script = 'job_scratch_dir'  

    job_tag = "array_a85sy5"
    job_input = r"$(awk -v ArrayTaskID=$SLURM_ARRAY_TASK_ID '$1==ArrayTaskID {print $2}' $config)"
    job_name = '$(cut -f 1 -d \'.\' "$job_input")'
    
    job_local_dir = f'{os.getcwd()}'
    job_scratch_dir = f'"{SCRATCH_DIR}/"${job_name_in_script}""'
