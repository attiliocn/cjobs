#!/usr/bin/env python3

import configparser
import subprocess
import argparse

from tools.util import get_containers_using_rclone, parse_containers_list

parser = argparse.ArgumentParser()

subparsers = parser.add_subparsers(required=True, dest='subparser')

parser_cluster = subparsers.add_parser('cluster-setup', add_help=False)
parser_cluster.add_argument("container", help='.sif container ID. To list available containers use cjobs --list-containers')
parser_cluster.add_argument("--send-files", nargs='+', required=False, help='send files from local to remote directory')
parser_cluster.add_argument("-c", "--cores", type=int, required=True, help='number of cores (CPUs) to be allocated')
parser_cluster.add_argument("-m", "--memory-per-core", type=int, required=True, help='memory in MB per core required')
parser_cluster.add_argument("-t", "--time", type=float, required=True, help='allocation time in hours')

parser_containers = subparsers.add_parser('listcontainers', help='list all available containers')

parser_gaussian = subparsers.add_parser('gaussian', help='setup a Gaussian calculation', parents=[parser_cluster])
parser_gaussian.add_argument('-j','--jobs', nargs='+', required=True, help='gaussian input file')

parser_xtb = subparsers.add_parser('xtb', help="setup a xTB calculation", parents=[parser_cluster])
parser_xtb.add_argument('-j','--jobs', nargs='+', required=True, help='coordinates file')
parser_xtb.add_argument('-f','--flags', help='xTB flags')
parser_xtb.add_argument('-i','--input', help='xTB detailed input file')

parser_crest = subparsers.add_parser('crest', help="setup crest calculation", parents=[parser_cluster])
parser_crest.add_argument('-j','--jobs', nargs='+', required=True, help='coordinates file')
parser_crest.add_argument('-f','--flags', help='crest flags')
parser_crest.add_argument('-i','--input', help='crest detailed input file')

args = parser.parse_args()
print(args)

if args.subparser == 'listcontainers':
    stdout, stderr = get_containers_using_rclone("sintcatmol:containers")

    if stderr:
        print(stderr)
        print("Could not fetch containers list from Google Drive.\nCheck your configuration file and try again")
    else:
        containers = [i for i in stdout.split('\n')]
        containers.sort()
        print("{: <15}{: <25}{: <}".format('Container ID', "Build Time", "File"))
        for container in containers:
            container_data = container.replace('.sif','')
            container_data = container_data.split('_')
            print("{: <15}{: <25}{: <}".format(container_data[-1], container_data[-2], container))
    exit
